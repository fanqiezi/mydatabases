import requests, os, lxml.etree, datetime, multiprocessing, functools

left_url = 'https://m.hkdm688.com'
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36',
    'Referer': 'https://m.hkdm688.com/js/player/mp4.php?id=https://iqiyi.cdn9-okzy.com/20200116/5009_4d6dec61/index.m3u8'
}


def get_url(work):
    url = "https://m.hkdm688.com/search.php?searchword={0}".format(work)
    return url


def get_type_url(url):
    responser = requests.get(url, headers=headers)  # 请求片源数
    responser.encoding = 'utf-8'
    responser = lxml.etree.HTML(responser.text)
    type_urls = responser.xpath('/html/body/div[7]/li/a/@href')  # 片源链接
    titles = responser.xpath('/html/body/div[7]/li/p/a/text()')  # 片源标题
    numbers = responser.xpath('/html/body/div[7]/li/span/text()')  # 片源集数
    urls = []
    for type_url in type_urls:
        type_url = left_url + type_url
        urls.append(type_url)
    return urls, titles, numbers


def get_num_urls(type_url):
    response = requests.get(type_url, headers=headers)  # 请求片源信息
    response.encoding = 'utf-8'
    response = lxml.etree.HTML(response.text)
    url_nums = response.xpath('/html/body/div[11]/ul/li/a/@href')  # 集数链接
    name_nums = response.xpath('/html/body/div[11]/ul/li/a/text()')  # 集数名
    urls = []
    for url_num in url_nums:
        url_num = left_url + url_num
        urls.append(url_num)
    return urls, name_nums


def get_noe_level_url(num_url):
    response = requests.get(num_url, headers=headers)  # 请求每集页面信息
    response.encoding = 'utf-8'
    response = lxml.etree.HTML(response.text)
    noe_level_url = response.xpath('/html/body/div[8]/script[1]/text()')[0].split(';')[3].split('"')[1]
    center_urls = noe_level_url.split('/')
    center_url = center_urls[3] + '/' + center_urls[4] + '/'
    return noe_level_url, center_url  # 返回顶级m3u8文件链接、链接片段


def get_media_urls(noe_level_url, center_url):
    left_url = 'https://iqiyi.cdn9-okzy.com/'
    response = requests.get(noe_level_url, headers)  # 请求顶级m3u8文件
    two_level = response.text
    rigth_url = two_level.split('\n')[-1]
    two_level_url = left_url + center_url + rigth_url  # 拼接二级m3u8文件链接
    two_level = requests.get(two_level_url, headers).text.split(',')  # 请求二级m3u8文件
    rigth_url = rigth_url.split('/')
    center_url2 = rigth_url[0] + '/' + rigth_url[1] + '/'
    urls = []
    media_urls = []
    for i in range(1, len(two_level) - 1):
        urls.append(two_level[i])
    for i in range(0, len(urls)):
        url = urls[i].split('\n')
        media_urls.append(left_url + center_url + center_url2 + url[1])  # 拼接ts片段链接
    return media_urls  # 返回所有ts片段链接


def download(media_url, work, name_num):
    path = 'E:\\vide
    if not os.path.exists(path):
        os.mkdir(path)
    media = requests.get(media_url, headers)  # 下载所有ts片段
    if not os.path.exists(path + '\\' + work):
        os.mkdir(path + '\\' + work)
    with open(path + '\\' + work + '\\第' + str(name_num) + '集.ts', 'ab') as f:  # 以二进制追加方式写入文件
        f.write(media.content)
        f.flush()
        f.close()


if __name__ == '__main__':
    work = input('输入动漫名:')
    url = get_url(work)
    type_urls, titles, numbers = get_type_url(url)
    if len(type_urls):
        index = 1
        for i in range(0, len(titles)):
            print(index, titles[i], numbers[i])
            index += 1
        url_num = int(input('选择下载哪一部:'))
        url_nums, name_nums = get_num_urls(type_urls[url_num - 1])
        one_two = input('选择单集下载(1)还是批量下载(2):')
        try:
            if one_two == '1':
                for name_num in name_nums:
                    print(name_num, end=' ')
                name_num = int(input('\n选择下载第几集:'))
                noe_level_url, center_url = get_noe_level_url(url_nums[name_num - 1])
                media_urls = get_media_urls(noe_level_url, center_url)
                print('第{0}集 开始下载...'.format(name_num))
                start_time = datetime.datetime.now()
                pool = multiprocessing.Pool(processes=os.cpu_count())  # 创建进程池,进程个数为电脑cpu个数
                for media_url in media_urls:
                    print('%.2f%%' % (media_urls.index(media_url) / len(media_urls) * 100))
                    pool.apply(functools.partial(download, work=work, name_num=name_num), (media_url,))
                    # 当一个进程执行完毕后会添加新的进程进去,阻塞,非阻塞会导致视频片段混乱
                pool.close()  # 关闭pool，使其不在接受新的任务
                pool.join()  # 主进程阻塞，等待子进程的退出
                end_time = datetime.datetime.now()
                print('第{0}集 下载完成\n耗时:{1}'.format(name_num,end_time - start_time))
            elif one_two == '2':
                for name_num in name_nums:
                    print(name_num, end=' ')
                start = int(input('\n输入起始集数:'))
                end = int(input('输入终止集数:'))
                start_time = datetime.datetime.now()
                pool = multiprocessing.Pool(processes=os.cpu_count())
                for name_num in range(start, end + 1):
                    noe_level_url, center_url = get_noe_level_url(url_nums[name_num - 1])
                    media_urls = get_media_urls(noe_level_url, center_url)
                    print('第{0}集 开始下载...'.format(name_num))
                    for media_url in media_urls:
                        print('%.2f%%' % (media_urls.index(media_url) / len(media_urls) * 100))
                        pool.apply(functools.partial(download, work=work, name_num=name_num), (media_url,))
                    end_time = datetime.datetime.now()
                    print('第{0}集 下载完成\n耗时:{1}'.format(name_num, end_time - start_time))
                pool.close()
                pool.join()
                end_time = datetime.datetime.now()
                print('全部下载完成\n耗时:{0}'.format(end_time - start_time))
            else:
                print('输入的信息有误')
        except Exception as e:
            print(e, '\n下载失败')
    else:
        print('没有找到任何记录')
